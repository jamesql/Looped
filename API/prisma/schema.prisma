// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ChannelType {
  TEXT
  VOICE
}

enum ChannelPermissionType {
  READ
  WRITE
  MANAGE
  CONNECT
}

model User {
  id String @id @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName String @db.VarChar(255)
  lastName String @db.VarChar(255)
  username String @unique @db.VarChar(255)

  email String @unique @db.VarChar(255)
  password String @db.VarChar(255)

  avatarUrl String?

  //messages Message[]
  OwnedServers Server[]
  serverMemberships ServerMember[]

  Message Message[]

  RefreshToken RefreshToken[]
}

model Server {
  id String @id @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  description String?
  ownerId String 
  owner User @relation(fields: [ownerId], references: [id])

  //channels Channel[]
  members ServerMember[]

  Channel Channel[]

  Role Role[]
}

model ServerMember {
  id String @id
  userId String
  serverId String
  user     User    @relation(fields: [userId], references: [id])
  server   Server  @relation(fields: [serverId], references: [id])

  Role Role[] @relation(name: "ServerMemberRoles")
}

model Channel {
  id String @id
  name String
  type ChannelType
  serverid String
  server Server @relation(fields: [serverid], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  channelMessages Message[]

  RolePermissions RolePermissions[]
}

model Message {
  id String @id
  content String
  senderid String
  sender User @relation(fields: [senderid], references: [id])
  channelid String
  channel Channel @relation(fields: [channelid], references: [id])
}

model Role {
  id String @id
  serverid String
  server Server @relation(fields: [serverid], references: [id])

  RolePermissions RolePermissions[]

  ServerMember ServerMember[] @relation(name: "ServerMemberRoles")
}

model RolePermissions {
  roleid String
  channelid String
  role Role @relation(fields: [roleid], references: [id])
  channel Channel @relation(fields: [channelid], references: [id])
  canRead Boolean
  canSend Boolean
  canManage Boolean
  canConnect Boolean

  @@id([roleid, channelid])
}

model RefreshToken {
  id String @id
  userid String 
  token String @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user User @relation(fields: [userid], references: [id])
}